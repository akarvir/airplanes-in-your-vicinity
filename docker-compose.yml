version: '3.8'

services:
  airplane-tracker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airplane-tracker-app
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - AIRCRAFT_UPDATE_INTERVAL=${AIRCRAFT_UPDATE_INTERVAL:-30}
      - USER_LOCATION_CACHE_DURATION=${USER_LOCATION_CACHE_DURATION:-300}
      - DB_PATH=/app/data/airplanes.db
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3001,http://localhost:3000}
      - AVIATION_API_KEY=${AVIATION_API_KEY}
      - AVIATION_API_BASE_URL=${AVIATION_API_BASE_URL:-https://api.aviationstack.com/v1}
      - OPENSKY_USERNAME=${OPENSKY_USERNAME}
      - OPENSKY_PASSWORD=${OPENSKY_PASSWORD}
    volumes:
      - airplane_data:/app/data
      - ./env.example:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - airplane-network

  # Optional: Add a reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: airplane-tracker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - airplane-tracker
    restart: unless-stopped
    networks:
      - airplane-network
    profiles:
      - production

volumes:
  airplane_data:
    driver: local

networks:
  airplane-network:
    driver: bridge
